name: setup go-jira execuable binary
description: >
  download and setup config for go-jira command.
  export $JIRA - exec binary path
  generate default config to ".github/tools/go-jira" if input "use-default = true"

inputs:
  project-name:
    required : false
    description: optional project name for JIRA CLI work on, or you need to input when running

runs :
  using: "composite"
  steps:
    - shell: pwsh
      run: |
        $GO_JIRA_URL = "https://github.com/go-jira/jira/releases/download/v1.0.27/jira-darwin-amd64"
        $EXT = ""
        if ($IsWindows -or $ENV:OS) {
          $GO_JIRA_URL = "https://github.com/go-jira/jira/releases/download/v1.0.27/jira-windows-amd64.exe"
          $EXT = ".exe"
        }

        $ROOT = "./.github/tools/go-jira"

        $JIRA = "$ROOT/jira$EXT"
        Invoke-WebRequest $GO_JIRA_URL -OutFile (New-Item -Path "$JIRA" -Force)
        $JIRA = ($JIRA | Resolve-Path |  select -ExpandProperty Path)
        chmod +x $JIRA
        $JIRA = ($JIRA -replace '\\', '/')
        echo "JIRA=$JIRA" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: create custom command config
      shell: bash
      run: |
        echo "copy go-jira config to ${{env.USERHOME}}"
        cp -Rf "${{github.action_path}}/.jira.d" "${{env.USERHOME}}"

        ProjectName="${{input.project-name}}"
        File="${{env.USERHOME}}/.jira.d/config.yml"
        if [ -z "$ProjectName" ]
        then
              echo "no project name provided"
        else
              echo "project: $ProjectName\n$(cat $File)" > $File
        fi
        cat $File
