name: setup go-jira execuable binary
description: >
  download and setup config for go-jira command.
  export $JIRA - exec binary path
  generate default config to ".github/tools/go-jira" if input "use-default = true"

#inputs:
#  jirad-yml:
#    required : true
#    description: required ".jira.d/config.yml" that copied to "$USERHOME/.jira.d/config.yml"

runs :
  using: "composite"
  steps:
    - shell: pwsh
      run: |
        $GO_JIRA_URL = "https://github.com/go-jira/jira/releases/download/v1.0.27/jira-darwin-amd64"
        $EXT = ""
        if ($IsWindows -or $ENV:OS) {
          $GO_JIRA_URL = "https://github.com/go-jira/jira/releases/download/v1.0.27/jira-windows-amd64.exe"
          $EXT = ".exe"
        }

        $ROOT = "./.github/tools/go-jira"

        $JIRA = "$ROOT/jira$EXT"
        Invoke-WebRequest $GO_JIRA_URL -OutFile (New-Item -Path "$JIRA" -Force)
        $JIRA = ($JIRA | Resolve-Path |  select -ExpandProperty Path)
        chmod +x $JIRA
        echo "JIRA=$JIRA" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        $JIRA_NODE_SCRIPT = ("${{github.action_path}}/node" | Resolve-Path |  select -ExpandProperty Path)
        echo "JIRA_NODE_SCRIPT=$JIRA_NODE_SCRIPT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

#    - name: copy inputs jira-config-yml
#      shell: bash
#      run: |
#        echo "copy default go-jira config to ${{env.USERHOME}}"
#        cp -Rf "${{github.action_path}}/.jira.d" "${{env.USERHOME}}"



#ProjectName="${{inputs.project-name}}"
#File="${{env.USERHOME}}/.jira.d/config.yml"
#if [ -z "$ProjectName" ]
#then
#      echo "no project name provided"
#else
#      echo "project: $ProjectName\n$(cat $File)" > $File
#fi
#cat $File

#echo "find and replace env in go-jira config file"
#$ConfigYmlFilepath = "${{github.action_path}}/.jira.d/config.yml"
#$ConfigYmlContent = (Get-Content -Path $ConfigYmlFilepath)
#gci env:* | sort-object name | ForEach {
#  $Name = $_.Name
#  $Value = $_.Vame
#  $ConfigYmlContent -replace "$Name}", "$Value"
#}
#$ConfigYmlContent | Set-Content -Path $ConfigYmlFilepath

# $Name
# $Value = "$Parts[1]"
# $Value
# $ConfigYmlContent = ($ConfigYmlContent -replace "$Name", "$Value")
# $ConfigYmlContent
